@page "/login"
@layout ERP.Blazor.Shared.EmptyLayout
@inject HttpClient Http
@inject NavigationManager Nav
@inject ERP.Blazor.Services.SesionService SesionService

<div class="auth-container">
    <div class="auth-card">
        <h2 class="text-center mb-5">Iniciar Sesión</h2>

        <div class="card-input">
            <div class="mb-3">
                <label for="email" class="form-label">Correo Electrónico</label>
                <input type="email" id="email" class="form-control" placeholder="ejemplo@correo.com" @bind="correo"/>
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Contraseña</label>
                <div class="input-group">
                    <input
                        type="@(mostrarContrasena ? "text" : "password")"
                        id="password"
                        class="form-control"
                        placeholder="********"
                        @bind="contrasena" />

                        <button type="button" class="btn-mostrar-contraseña" @onclick="ToggleVerContrasena">
                            @if (mostrarContrasena)
                            {
                                <!-- Ícono: ojo tachado -->
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                                    <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7 7 0 0 0 2.79-.588M5.21 3.088A7 7 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474z"/>
                                    <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z"/>
                                </svg>
                            }
                            else
                            {
                                <!-- Ícono: ojo -->
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                    <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"/>
                                    <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"/>
                                </svg>
                            }
                        </button>
                </div>
            </div>

            <button @onclick="IniciarSesion" class="btn btn-primary w-100">Entrar</button>
        </div>

        <div class="text-center mt-3">
            <span>¿No tienes cuenta?</span>
            <a href="/registro" class="link-primary">Regístrate</a>
        </div>
    </div>

    <svg class="wave" viewBox="0 0 1440 320" preserveAspectRatio="none">
        <path d="M0,160 C480,240 960,80 1440,160 L1440,320 L0,320 Z"></path>
    </svg>
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="toast-message @toastClass">
        @mensaje
    </div>
}

@code {
    private string correo = "";
    private string contrasena = "";
    private string mensaje = "";
    private string toastClass = "";
    private bool mostrarContrasena = false;

    private async Task IniciarSesion()
    {
        if (string.IsNullOrWhiteSpace(correo) || string.IsNullOrWhiteSpace(contrasena))
        {
            MostrarNotificacion("Cuidado: Todos los campos son obligatorios", "caution");
            return;
        }

        var loginData = new { Correo = correo, Contrasena = contrasena };

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5223/api/usuarios/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                 // 🔹 Leer el JSON completo
            var json = await response.Content.ReadAsStringAsync();

            // 🔹 Extraer solo el objeto interno "usuario"
            using var doc = System.Text.Json.JsonDocument.Parse(json);
            if (doc.RootElement.TryGetProperty("usuario", out var usuarioElement))
            {
                var usuarioJson = usuarioElement.GetRawText();
                await SesionService.GuardarSesionRawAsync(usuarioJson); // guarda solo el usuario
            }
                
                MostrarNotificacion("Correcto: Iniciando sesion", "success");
                await Task.Delay(3000);
                Nav.NavigateTo("/home");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarNotificacion("Error: " + error, "error");
                Console.Error.WriteLine("Login Error: " + error);
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion("Ups! Error de conexión", "error");
            Console.Error.WriteLine("Excepción: " + ex);
        }
    }

    private void ToggleVerContrasena()
    {
        mostrarContrasena = !mostrarContrasena;
    }

    private async void MostrarNotificacion(string texto, string tipo)
    {
        mensaje = texto;
        toastClass = tipo;
        StateHasChanged();

        await Task.Delay(3000);
        mensaje = "";
        StateHasChanged();
    }
}
