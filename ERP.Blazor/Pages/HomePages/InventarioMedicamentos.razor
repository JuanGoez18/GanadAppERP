@page "/inventario-medicamentos"
@layout MainLayout
@using ERP.Blazor.Models
@inject ERP.Blazor.Services.MedicamentosService MedicamentoService
@inject ERP.Blazor.Services.SesionService SesionService
@inject NavigationManager Nav

<PageTitle>Inventario Medicamentos</PageTitle>

@if (!sesionVerificada)
{
    <div class="modal-nosesion">
        <div class="nosesion-container">
            <h2>Sesión no activa</h2>
            <p>Debes iniciar sesión primero.</p>
            <button class="btn-modal" @onclick="VolverABienvenida">Volver</button>
        </div>
    </div>
}
else
{
    <div class="auth-container2">
        <div class="auth-card2">
            <h1 class="main-title">Inventario de Medicamentos</h1>
            <p class="module-description">Administra los medicamentos registrados en el sistema ERP.</p>

            <div class="search-bar">
                <input type="text" placeholder="Buscar medicamento..." @bind="filtro" />
                <button class="btn btn-secondary" @onclick="BuscarMedicamentos">Buscar</button>
                <button class="btn btn-primary" @onclick="AbrirModalNuevo">+ Nuevo Medicamento</button>
            </div>

            <table class="usuarios-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Tipo</th>
                        <th>Registro</th>
                        <th>Caducidad</th>
                        <th>Stock</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (cargando)
                    {
                        <tr><td colspan="7" class="text-center">Cargando medicamentos...</td></tr>
                    }
                    else if (medicamentos == null || medicamentos.Count == 0)
                    {
                        <tr><td colspan="7" class="text-center">No se encontraron medicamentos.</td></tr>
                    }
                    else
                    {
                        @foreach (var m in medicamentos.Where(x => x.Estado)) 
                        {
                            <tr>
                                <td>@m.Id</td>
                                <td>@m.Nombre</td>
                                <td>@m.Tipo</td>
                                <td>@m.FechaRegistro.ToString("yyyy-MM-dd")</td>
                                <td>@m.FechaCaducidad.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <span class="@(GetStockColor(m.Stock))">@m.Stock</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-info" @onclick="() => EditarMedicamento(m)">Editar</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ConfirmEliminar(m.Id)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@if (mostrarModal)
{
    <div class="modal-nuevousuario-over">
        <div class="modal-nuevousuario">
            <h3>@(medicamentoEditando == null ? "Nuevo Medicamento" : "Editar Medicamento")</h3>

            <div class="modal-nuevousuario-body">
                <label>Nombre</label>
                <input type="text" class="form-control" @bind="form.Nombre" />
                 @if (string.IsNullOrWhiteSpace(form.Nombre))
                {
                    <small class="text-danger">El nombre es obligatorio.</small>
                }

                <label>Tipo</label>
                <input type="text" class="form-control" @bind="form.Tipo" />
                @if (string.IsNullOrWhiteSpace(form.Tipo))
                {
                    <small class="text-danger">El tipo es obligatorio.</small>
                }

                <label>Fecha Registro</label>
                <input type="date" class="form-control" @bind="fechaRegistroLocal" />

                <label>Fecha Caducidad</label>
                <input type="date" class="form-control" @bind="fechaCaducidadLocal" />

                <label>Stock</label>
                <input type="number" class="form-control" @bind="form.Stock" min="0" />

                <label>ID Proveedor</label>
                <input type="number" @bind="form.IdProveedor" min="0" />
                @if (form.IdProveedor == null || form.IdProveedor <= 0)
                {
                <small class="text-danger">El ID del proveedor es obligatorio.</small>
                }
                
            </div>

            <div class="modal-nuevousuario-footer">
                <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                <button class="btn btn-success" @onclick="GuardarMedicamento">Guardar</button>
            </div>
        </div>
    </div>
}

@code {
    private List<MedicamentoDTO> medicamentos = new();
    private MedicamentoDTO form = new MedicamentoDTO();
    private MedicamentoDTO? medicamentoEditando;
    private bool mostrarModal = false;
    private string filtro = string.Empty;
    private bool sesionVerificada = true;
    private bool cargando = true;

    private DateTime fechaRegistroLocal
    {
        get => form.FechaRegistro.ToLocalTime();       // Muestra en input en hora local
        set => form.FechaRegistro = value.ToUniversalTime(); // Convierte a UTC al guardar
    }

    private DateTime fechaCaducidadLocal
    {
        get => form.FechaCaducidad.ToLocalTime();      
        set => form.FechaCaducidad = value.ToUniversalTime();
    }

    protected override async Task OnInitializedAsync()
    {
        await VerificarSesionAsync();
        await CargarMedicamentosAsync();
    }

    private async Task VerificarSesionAsync()
    {
        try
        {
            sesionVerificada = await SesionService.HaySesionAsync();
        }
        catch
        {
            sesionVerificada = false;
        }
    }

    private async Task CargarMedicamentosAsync()
    {
        try
        {
            cargando = true;
            medicamentos = await MedicamentoService.ObtenerMedicamentosAsync();
            // Si el servicio trae ya solo los activos, este Where es redundante pero seguro:
            medicamentos = medicamentos.Where(x => x.Estado).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando medicamentos: {ex.Message}");
            medicamentos = new List<MedicamentoDTO>();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task BuscarMedicamentos()
    {
        try
        {
            cargando = true;
            if (string.IsNullOrWhiteSpace(filtro))
                medicamentos = await MedicamentoService.ObtenerMedicamentosAsync();
            else
                medicamentos = await MedicamentoService.BuscarMedicamentosAsync(filtro);

            medicamentos = medicamentos.Where(x => x.Estado).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error buscando: {ex.Message}");
            medicamentos = new List<MedicamentoDTO>();
        }
        finally
        {
            cargando = false;
        }
    }

    private void AbrirModalNuevo()
    {
        medicamentoEditando = null;
        form = new MedicamentoDTO
        {
            FechaRegistro = DateTime.Now,
            FechaCaducidad = DateTime.Now.AddYears(1),
            Stock = 0,
            Estado = true
        };
        mostrarModal = true;
    }

    private void EditarMedicamento(MedicamentoDTO m)
    {
        medicamentoEditando = m;
        form = new MedicamentoDTO
        {
            Id = m.Id,
            Nombre = m.Nombre,
            Tipo = m.Tipo,
            FechaRegistro = m.FechaRegistro == default ? DateTime.Now : m.FechaRegistro,
            FechaCaducidad = m.FechaCaducidad == default ? DateTime.Now.AddYears(1) : m.FechaCaducidad,
            Stock = m.Stock,
            IdProveedor = m.IdProveedor,
            Estado = m.Estado
        };
        mostrarModal = true;
    }

    private async Task GuardarMedicamento()
    {
        // ✅ Validación de campos obligatorios
        if (string.IsNullOrWhiteSpace(form.Nombre) ||
            string.IsNullOrWhiteSpace(form.Tipo) ||
            
            form.IdProveedor == null || form.IdProveedor <= 0)
        {
        Console.WriteLine("Por favor completa todos los campos obligatorios.");
        return;
    }
        if (string.IsNullOrWhiteSpace(form.Nombre))
        {
            Console.WriteLine("Nombre requerido.");
            return;
        }

        bool ok;
        if (medicamentoEditando == null)
        {
            ok = await MedicamentoService.CrearMedicamentoAsync(form);
        }
        else
        {
            ok = await MedicamentoService.ActualizarMedicamentoAsync(form);
        }

        if (!ok) Console.WriteLine("Error al guardar medicamento");

        mostrarModal = false;
        await CargarMedicamentosAsync();
    }

    private async Task ConfirmEliminar(int id)
    {
        var ok = await MedicamentoService.CambiarEstadoMedicamentoAsync(id, false);
        if (!ok) Console.WriteLine("Error al desactivar medicamento");
        await CargarMedicamentosAsync();
    }

    private string GetStockColor(int stock)
    {
        if (stock == 0) return "stock-rojo";
        if (stock < 10) return "stock-amarillo";
        return "stock-verde";
    }

    private void CerrarModal() => mostrarModal = false;

    private void VolverABienvenida() => Nav.NavigateTo("/", forceLoad: true);
}
