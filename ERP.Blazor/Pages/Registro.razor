@page "/registro"
@layout ERP.Blazor.Shared.EmptyLayout
@using ERP.Blazor.Models
@inject HttpClient Http
@inject NavigationManager Nav

<div class="auth-container">
    <div class="auth-card">
        <h2 class="text-center mb-4">Crear Cuenta</h2>

        <div class="card-input">
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre Completo</label>
                <input type="text" id="nombre" class="form-control" placeholder="Ej: Juan Pérez" @bind="nombre"/>
            </div>

            <div class="mb-3">
                <label for="cc" class="form-label">Documento de Identidad</label>
                <input type="text" id="cc" class="form-control" placeholder="1001223334" @bind="cc"/>
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Correo Electrónico</label>
                <input type="email" id="email" class="form-control" placeholder="ejemplo@correo.com" @bind="correo"/>
            </div>

            <div class="mb-3 position-relative">
                <label for="password" class="form-label">Contraseña</label>
                <div class="input-group">
                    <input type="@((mostrarContrasena ? "text" : "password"))"
                        id="password"
                        class="form-control"
                        placeholder="********"
                        @bind="contrasena" />

                    <button type="button" class="btn-mostrar-contraseña" @onclick="ToggleVerContrasena">
                        @if (mostrarContrasena)
                        {
                            <!-- Ícono: ojo tachado -->
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-eye-slash-fill" viewBox="0 0 16 16">
                                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7 7 0 0 0 2.79-.588M5.21 3.088A7 7 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474z"/>
                                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12z"/>
                            </svg>
                        }
                        else
                        {
                            <!-- Ícono: ojo -->
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"/>
                                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"/>
                            </svg>
                        }
                    </button>
                </div>
            </div>

            <div class="mb-3">
                <label for="confirm" class="form-label">Confirmar Contraseña</label>
                <input type="@((mostrarContrasena ? "text" : "password"))"
                    id="confirm"
                    class="form-control"
                    placeholder="********"
                    @bind="confirmar" />
            </div>

            <button @onclick="RegistrarUsuario" class="btn btn-primary w-100">Registrarme</button>
        </div>

        <div class="text-center mt-3">
            <span>¿Ya tienes cuenta?</span>
            <a href="/login" class="link-primary">Iniciar Sesión</a>
        </div>
    </div>

    <svg class="wave" viewBox="0 0 1440 320" preserveAspectRatio="none">
        <path d="M0,160 C480,240 960,80 1440,160 L1440,320 L0,320 Z"></path>
    </svg>
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="toast-message @toastClass">
        @mensaje
    </div>
}

@code {
    private string nombre = "";
    private string cc="";
    private string correo = "";
    private string contrasena = "";
    private string confirmar = "";
    private string mensaje = "";
    private string toastClass = "";
    private bool mostrarContrasena = false;

    private async Task RegistrarUsuario()
    {
        mensaje = "";
        toastClass = "";

        if (string.IsNullOrWhiteSpace(nombre) ||
            string.IsNullOrWhiteSpace(correo) ||
            String.IsNullOrWhiteSpace(cc) ||
            string.IsNullOrWhiteSpace(contrasena) ||
            string.IsNullOrWhiteSpace(confirmar))
        {
            MostrarNotificacion("Cuidado: Todos los campos son obligatorios", "caution");
            return;
        }

        if (!System.Text.RegularExpressions.Regex.IsMatch(correo, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            MostrarNotificacion("Cuidado: Ingresa un correo válido", "caution");
            return;
        }

        if (nombre.Length > 20)
        {
            MostrarNotificacion("Cuidado: Nombre demaciado extenso","caution");
            return;
        }

        if (cc.Length >10)
        {
            MostrarNotificacion("Cuidado: Ingresa un documento de identidad válido","caution");
            return;
        }

        if (nombre.Any(char.IsDigit))
        {
            MostrarNotificacion("Cuidado: Nombre solo con texto","caution");
            return;
        }

        if (contrasena.Length < 7)
        {
            MostrarNotificacion("Cuidado: La contraseña minimo 7 caracteres", "caution");
            return;
        }

        bool tieneLetra = contrasena.Any(char.IsLetter);
        bool tieneNumero = contrasena.Any(char.IsDigit);

        if (!tieneLetra || !tieneNumero)
        {
            MostrarNotificacion("Cuidado: La contraseña debe incluir letras y números", "caution");
            return;
        }

        if (contrasena != confirmar)
        {
            MostrarNotificacion("Cuidado: Las contraseñas no coinciden", "caution");
            return;
        }

        var usuario = new RegistroRequest
        {
            Nombre = nombre,
            Apellido = "",
            Correo = correo,
            Contrasena = contrasena,
            CC = cc
        };

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5223/api/usuarios/registro", usuario);
            if (response.IsSuccessStatusCode)
            {
                MostrarNotificacion("Correcto: Usuario registrado correctamente", "success");
                StateHasChanged();
                await Task.Delay(3000);
                Nav.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarNotificacion("Ups! Error del servidor: " + error, "error");
                Console.Error.WriteLine("Error completo API: " + error);
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion("Ups! Error inesperado ", "error");
            Console.Error.WriteLine("Excepción: " + ex.ToString());
        }
    }

    private void ToggleVerContrasena()
    {
        mostrarContrasena = !mostrarContrasena;
    }

    private void MostrarNotificacion(string texto, string tipo)
    {
        mensaje = texto;
        toastClass = tipo;
        InvokeAsync(async () =>
        {
            await Task.Delay(3000);
            mensaje = "";
            StateHasChanged();
        });
    }
}
